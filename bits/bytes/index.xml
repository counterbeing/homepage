<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Bytes on Bits and Blocks</title>
    <link>https://www.corylogan.com/bits/bytes/</link>
    <description>Recent content in Bytes on Bits and Blocks</description>
    <ttl>1440</ttl>
    <generator>Hugo 0.58.3</generator>
    <language>en-us</language>
    <managingEditor> (Cory Logan)</managingEditor>
    <webMaster> (Cory Logan)</webMaster>
    <lastBuildDate>Fri, 25 Oct 2019 06:02:10 UT</lastBuildDate>
    <atom:link href="https://www.corylogan.com/bits/bytes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Saving Time With Tmux</title>
      <link>https://www.corylogan.com/bits/bytes/saving-time-with-tmux/</link>
      <pubDate>Mon, 10 Jul 2017 11:45:28 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/saving-time-with-tmux/</guid>
      <description>What is a terminal multiplexer, and why do I care? When you split up a terminal screen into sub-terminals, that&amp;rsquo;s called terminal multiplexing. This is nothing new, GNU Screen has been around since 1987. Tmux is just screen&amp;rsquo;s younger, nubile cousin. I&amp;rsquo;m about to explain how this simple technology can:
 Keep you organized. Lower the bar to get to work. Save you time. Enable teamwork.  Here&amp;rsquo;s a quick demonstration:</description>
      <content:encoded><![CDATA[ What is a terminal multiplexer, and why do I care? When you split up a terminal screen into sub-terminals, that&amp;rsquo;s called terminal multiplexing. This is nothing new, GNU Screen has been around since 1987. Tmux is just screen&amp;rsquo;s younger, nubile cousin. I&amp;rsquo;m about to explain how this simple technology can:
 Keep you organized. Lower the bar to get to work. Save you time. Enable teamwork.  Here&amp;rsquo;s a quick demonstration: 
Multiple panes for multiple things If you watch the demo above, you can see that you can make multiple panes, and multiple windows. You can organize them however you like.
The benefit of this is that you can have a server running in one pane, and an editor running on another. Or your test suite. Or whatever else you need to keep an eye on.
You might think, well, I can already do that in my terminal app. And maybe you can! But, can you do it on remote servers over ssh? And can you keep those panes running even if you quit your terminal app? Didn&amp;rsquo;t think so.
Keep your workspace tidy What if, every time you went to start working on your app, your text editor opened, your test suite ran, git pulled the latest changes, and a development server launched? If that gets you at all excited, you should check out tmuxinator. There are other options out there that do the same thing. But, with a simple configuration file, you can have all that and more!
Work on remote servers Sometimes when working on a remote server, it&amp;rsquo;s useful to keep a long running task going, or at least be able to look at the same workspace you were looking at previously. By keeping your work in a tmux session, you can simply rejoin the session you were previously using. Everything is now exactly as you left it!
I realize it&amp;rsquo;s not the best use, but there have been a couple of times I&amp;rsquo;ve used tmux to keep a long running task going in the background on a server. This way, when I close my laptop and walk away, everything keeps running. Imagine a long rake task, sure I could have put it in a background job, but it was a one off task, and writing the job would have been unnecessary work.
Collaborate You can have more than one person in a tmux session at once. This has to be one of the greatest things of all about tmux. It&amp;rsquo;s like screen sharing, but so much faster, as it&amp;rsquo;s just over an ssh session. There is nothing worse than trying to collaborate over a slow VNC screen share, it&amp;rsquo;s like typing with boxing gloves. There are a few hoops to jump through, another user, ssh access, and permissions&amp;hellip; But there&amp;rsquo;s another option.
Tmate is a fantastically handy little utility that does all of the hoop jumping for you. After installing tmate, just run it, and give your friend access by copying your secure ssh command. Even from the other side of the world, you can have lag-free collaboration!
Next steps Go give tmux a shot!
You&amp;rsquo;ll need to learn some of the basic commands for getting around, and probably do a little customization. Good luck!
]]></content:encoded>
    </item>
    <item>
      <title>Why Choose Vim</title>
      <link>https://www.corylogan.com/bits/bytes/why-choose-vim/</link>
      <pubDate>Wed, 14 Dec 2016 02:30:08 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/why-choose-vim/</guid>
      <description>TLDR Choosing a text editor is a very personal decision. You grow with your editor, as your editor grows with you. As I use my text editor more and more over the years, I&amp;rsquo;m constantly constantly learning new techniques for working more efficiently. Some of them stick, others are forgotten. I find that sequences and shortcuts that I most use stay. But just as importantly VIM accommodates my changing needs through configuration, plugin, or otherwise.</description>
      <content:encoded><![CDATA[ TLDR Choosing a text editor is a very personal decision. You grow with your editor, as your editor grows with you. As I use my text editor more and more over the years, I&amp;rsquo;m constantly constantly learning new techniques for working more efficiently. Some of them stick, others are forgotten. I find that sequences and shortcuts that I most use stay. But just as importantly VIM accommodates my changing needs through configuration, plugin, or otherwise.
Most of all, you need a good editor, that you are familiar with.
Why Vim Works For Me Different jobs require different tools.
Vim also has it&amp;rsquo;s own set of advantages. It&amp;rsquo;s very fast at large search and replace operations. It&amp;rsquo;s infinitely extensible, with plugins that integrate with git, automatically format tables, check syntax. It can be operated entirely over SSH. It&amp;rsquo;s easily customized. It&amp;rsquo;s ubiquitous. It&amp;rsquo;s free. It has a great community of people.
What does it look like? It actually looks pretty modern!
A Few Caveats  Steep learning curve. Customization is almost requisite Not everyone knows how to use VIM, this can be and impediment to working with someone else at your computer.  I actually keep a couple of GUI editors around as I find that have uses for them. There are some tasks that mice are just really good at. TextWrangler works well with really large files. Sometimes I might just it to look at a gigantic CSV alongside the code that&amp;rsquo;s being used to manipulate it.
Better, Faster, Stronger Vim is brilliant in how extensible and malleable it is. You can change it by simply installing a new plugin. The setup can be entirely scripted.
As an editor, Vi has really led the way on a great many conventions. Vim came after Vi and offers a superset of features. Having different modes of editing, and keyboard navigation, are some of the most fundamental parts. It wasn&amp;rsquo;t just that it was early to introduce these features, but that they&amp;rsquo;ve been perfected over many years.
Vim has always been light and nimble. It&amp;rsquo;s fast to boot (unless you load it down with tons of plugins)
Portability Vim comes standard on all modern builds of Linux and Mac OS. You can jump right into it. It&amp;rsquo;s really helpful to be able to navigate a bare bones installation of Vim, even if you don&amp;rsquo;t do it as well as with a customized version.
Another huge piece of portability, is remote access. Vim works marvelously over an ssh connection. I can do remote work on a server far away, as though it were local. This is really great for travel.
If you want to give it a go, you can try out my configuration found on github.
I Frequently Use Other Editors Vim is a tool. It&amp;rsquo;s very useful to know. But sometimes, I actually prefer to work in a different application. My other favorite editor at the moment is Atom, and I&amp;rsquo;m using it right now to with this entry. It has great markdown support and integrates with system spell checking. At the end of the day, Vim has a load of features and advantages that can help you work faster. But, you must always use what works for you!
]]></content:encoded>
    </item>
    <item>
      <title>A Single Singleton in Ruby</title>
      <link>https://www.corylogan.com/bits/bytes/a-single-singleton-in-ruby/</link>
      <pubDate>Wed, 14 Dec 2016 02:22:26 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/a-single-singleton-in-ruby/</guid>
      <description>The singleton design pattern I&amp;rsquo;m relatively new the the concept of the singleton, even though I&amp;rsquo;ve been programming for a number of years. I&amp;rsquo;ve run into several instances in which I new that this was exactly what I needed, but did not have a name for it. Here, I&amp;rsquo;m going to try to explain it to myself a year ago. There are a few questions I&amp;rsquo;ll try to address.</description>
      <content:encoded><![CDATA[ The singleton design pattern I&amp;rsquo;m relatively new the the concept of the singleton, even though I&amp;rsquo;ve been programming for a number of years. I&amp;rsquo;ve run into several instances in which I new that this was exactly what I needed, but did not have a name for it. Here, I&amp;rsquo;m going to try to explain it to myself a year ago. There are a few questions I&amp;rsquo;ll try to address.
 Why do I care? What does it do? How should I implement it?  Why do I care? A lot has been written on design patterns, and by people with a lot more experience than myself. I&amp;rsquo;d recommend picking up a book on the topic and learning a bit more if it&amp;rsquo;s a new concept to you. Each one of these patterns is a tool that you can use to solve problems that have been solved over and over again. They can hasten, and solidify your development, as well as give you a way to succinctly communicate big ideas.
This particular pattern generally comes into play when you need some kind of global object to not only provide a set of methods, but also manage some kind of global state.
What does it do? I&amp;rsquo;ll give you a real world example to help make the point. In working on an application that was in charge of sifting through large piles of data, and alerting a person for errors several times a day, I needed a way to keep track of the errors in memory. It also needed to be available to many different classes in the application.
The singleton fits this almost perfectly.
I&amp;rsquo;ll admit, there are many cases when it&amp;rsquo;s a poor choice for the pattern to use. Any time you only need state for a little while, or if you need more than a handful of methods on an object.
In essence, the singleton is for simple objects that are action based, and that you only want one of in the instance of your application.
How should I implement it? There are different ways to implement the singleton pattern. Let&amp;rsquo;s first go over an example of the pattern implemented by hand, so that you can see how it works, before we try to hide some of the details. We&amp;rsquo;ll stick with the error logger example.
class ErrorLogger # This prevents the class from being instantiated. With a singleton, we don&amp;#39;t # want more than one instance. That&amp;#39;s pretty much the definition. private_class_method :new # This class variable will be in charge of storing the global state of our # singleton in memory. All of the information will end up here. We&amp;#39;ll access # it through another method of our choosing. @@log = [] # Everything inside of this will be declared as a class method. class &amp;lt;&amp;lt; self def log_an_error(error) @@log &amp;lt;&amp;lt; error end def print_log @@log.inspect end end end ErrorLogger.log_an_error(&amp;#39;Server is on fire!&amp;#39;) ErrorLogger.print_log # =&amp;gt; [&amp;#34;Server is on fire&amp;#34;] There are other implementations of the singleton, but I prefer to simply have the class expose any methods directly on itself. Some other singletons have the class create a single instance of itself, and all methods are instance methods, and in that case you can use instance variables.
But, this can be simplified further with the help of ruby&amp;rsquo;s built in singleton module. The one gotcha here, is that calling it behaves a little differently. These are now instance methods and must be called on the instance.
require &amp;#39;singleton&amp;#39; class ErrorLogger include Singleton def initialize @log = [] end def log_an_error(error) @log &amp;lt;&amp;lt; error end def print_log @log.inspect end end error_logger = ErrorLogger.instance error_logger.log_an_error(&amp;#39;Killing me softly...&amp;#39;) error_logger.print_log # =&amp;gt; [&amp;#34;Killing me softly...&amp;#34;] In my opinion, it doesn&amp;rsquo;t look much better than the first example. But, it does avoid the use of class variables, which is nice.
I think though, the one that I&amp;rsquo;ll probably reach for next time, is using module methods on a module. I know that this overlooks a few things, like the fact that modules can be mixed into classes, and you don&amp;rsquo;t really want that with a singleton. But, I&amp;rsquo;d say, in all practical terms, just don&amp;rsquo;t do that.
module ErrorLogger class &amp;lt;&amp;lt; self def log @log ||= [] end def log_an_error(error) log &amp;lt;&amp;lt; error end def print_log log.inspect end end end ErrorLogger.log_an_error(&amp;#39;Whoops!&amp;#39;) ErrorLogger.print_log # =&amp;gt; [&amp;#34;Whoops!&amp;#34;] There are other great articles that dive further into the topic. I&amp;rsquo;d really recommend Practicing Ruby&amp;rsquo;s take on the topic.
]]></content:encoded>
    </item>
    <item>
      <title>The Mysteries of the Ruby Heredoc</title>
      <link>https://www.corylogan.com/bits/bytes/the_mysteries_of_the_ruby_heredoc/</link>
      <pubDate>Fri, 18 Nov 2016 17:28:41 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/the_mysteries_of_the_ruby_heredoc/</guid>
      <description>As of writing this, I&amp;rsquo;m running Ruby version 2.3.0. Not all of this, particularly the stripped heredoc, is available in plain ruby before 2.3.0.
Heredoc Basics So, you need a string that&amp;rsquo;s longer than a line, and you&amp;rsquo;re sick of quotes and backslashes? And you might like to retain formatting? You want string interpolation too? Enter, heredoc.
Here&amp;rsquo;s your basic, run of the mill, heredoc. You&amp;rsquo;ll notice we use the &amp;lt;&amp;lt;- operator, and our safe-word, which we will use to end the heredoc.</description>
      <content:encoded><![CDATA[ As of writing this, I&amp;rsquo;m running Ruby version 2.3.0. Not all of this, particularly the stripped heredoc, is available in plain ruby before 2.3.0.
Heredoc Basics So, you need a string that&amp;rsquo;s longer than a line, and you&amp;rsquo;re sick of quotes and backslashes? And you might like to retain formatting? You want string interpolation too? Enter, heredoc.
Here&amp;rsquo;s your basic, run of the mill, heredoc. You&amp;rsquo;ll notice we use the &amp;lt;&amp;lt;- operator, and our safe-word, which we will use to end the heredoc.
def print_a_haiku haiku = &amp;lt;&amp;lt;-TEXT ruby is pretty the formatting perfected lovely indented TEXT puts haiku end print_a_haiku That would simply return the text as expected:
ruby is pretty the formatting perfected lovely indented This works, but it&amp;rsquo;s clearly ugly. When you see it in a piece of code you&amp;rsquo;re trying to navigate, it&amp;rsquo;s more than a little disorienting. You could actually indent the text above, but, if you do that the string returned will also have leading spaces. In some cases, leading spaces can break things in unexpected ways.
Stripped Heredocs One thing that drives me nuts, is when I&amp;rsquo;m reading some code that contains heredocs, and suddenly you&amp;rsquo;re all the way unindented. While in many cases this might be an indicator that something is wrong, there are many places I think it&amp;rsquo;s acceptable, and even preferable to have an indented heredoc.
As of Ruby 2.3, we have a new way to handle this. We declare the heredoc using the &amp;lt;&amp;lt;~ operator.
def print_a_haiku haiku = &amp;lt;&amp;lt;~TEXT ruby is pretty the formatting perfected lovely indented TEXT puts haiku end It&amp;rsquo;s a small thing, but these little niceties really help when trying to internalize a complicated file quickly.
The Rails Way Long before ruby featured a stripped heredoc, Rails saw the need and implemented their own method. Here is their implementation, which was added as an extension of String.
class String def strip_heredoc indent = scan(/^[ \t]*(?=\S)/).min.try(:size) || 0 gsub(/^[ \t]{#{indent}}/, &amp;#39;&amp;#39;) end end This counts the minimum number of spaces before all lines of your heredoc, and indents accordingly. You&amp;rsquo;d use it like so.
puts &amp;lt;&amp;lt;-MY_STRING.strip_heredoc  here is some text and indented once here MY_STRING I mention this in part, because I found it useful, and you might find it useful if you&amp;rsquo;re on an earlier version of ruby. If you&amp;rsquo;re 2.3 or later, I would prefer the Ruby implementation.
There&amp;rsquo;s another reason this is worth looking at. It demonstrates how to extend string and write your own heredoc formatter.
My Own Bastardization It feels like I should feel guilty whenever I even consider adding an extension to a core class. I don&amp;rsquo;t though. But, I will offer a caveat. Don&amp;rsquo;t go monkey patching carelessly! Be sure you&amp;rsquo;re not overwriting anything important, or you&amp;rsquo;ll be in a world of hurt.
I, for one, believe that monkey patching can be done in respectable ways.
Enough with the warnings. Here&amp;rsquo;s the use case that got me thinking about it. Recently, I&amp;rsquo;ve been having frequent need to test the output of various CSVs. There are various ways to do this&amp;hellip; I could have fixtures, but that&amp;rsquo;s a lot of fixtures to manage. I could simply let the lines run on long, but that&amp;rsquo;s very difficult to read, and even more difficult to format. It&amp;rsquo;s a monkey patch for string that allows you to write in a clearer format, that allows you to respect line length limitations.
Take a CSV for example, but, also imagine it&amp;rsquo;s much wider.
first_name,last_name,favorite_hobby,favorite_color,favorite_food,favorite_kind_of_motorcycle Cory,Logan,climbing,red,pizza,drz400 Paul,Baker,reading,blue,cheese,klr650  So, we could just stuff it in a heredoc and call it done, but that leaves the line length too long to look at on one screen. If you&amp;rsquo;re running something like rubocop, you probably have a line length limit to contend with as well.
So, here it is with a specially formatted heredoc, in which, two line breaks equal one. Allowing you to break lines, wherever, as long as you don&amp;rsquo;t need two.
csv_string = &amp;lt;&amp;lt;-CSV.csv_doc 	first_name,last_name,favorite_hobby,favorite_color, favorite_food,favorite_kind_of_motorcycle Cory,Logan,climbing,red,pizza,drz400 Paul,Baker,reading,blue,cheese,klr650 CSV It&amp;rsquo;s worth noting what&amp;rsquo;s actually happening here, as I&amp;rsquo;d never seen the syntax for calling a method on the result of a heredoc before. The &amp;lt;&amp;lt;-CSV part, is just your regular heredoc, it&amp;rsquo;s saying that the end of the string is at the next occurrence of the text CSV, which you will find at the end. Then, the method csv_doc is called on the resulting instance of String.
This formatting is all about being able to read it in the context of code or a test. In order to achieve this formatting, this is where the monkey patch comes in.
class String def csvdoc stripped = strip_heredoc.gsub(/\n(?!\n)/, &amp;#39;&amp;#39;) &amp;#34;#{stripped}\n&amp;#34; end end This also inserts an extra empty line at the end of the string, to make it a valid CSV. This could be modified to many different cases. I&amp;rsquo;ve just been running into the CSV example a lot. And if you&amp;rsquo;re really not into monkey patching, you might consider implementing it as a standalone method that you pass a string to.
Have fun!
]]></content:encoded>
    </item>
  </channel>
</rss>
