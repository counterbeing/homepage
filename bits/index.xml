<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Bits and Blocks</title>
    <link>https://www.corylogan.com/bits/</link>
    <description>Recent content on Bits and Blocks</description>
    <ttl>1440</ttl>
    <generator>Hugo 0.55.6</generator>
    <language>en-us</language>
    <managingEditor> (Cory Logan)</managingEditor>
    <webMaster> (Cory Logan)</webMaster>
    <lastBuildDate>Wed, 22 May 2019 19:43:22 UT</lastBuildDate>
    <atom:link href="https://www.corylogan.com/bits/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comparing Performance of Ruby and Golang With a Benchmark</title>
      <link>https://www.corylogan.com/bits/bits/comparing-performance-of-ruby-and-golang-with-a-benchmark/</link>
      <pubDate>Tue, 21 May 2019 20:39:32 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/comparing-performance-of-ruby-and-golang-with-a-benchmark/</guid>
      <description>I recently solved a coding challenge using Ruby. I&amp;rsquo;ve been curious for some time about coding using Golang, and so I decided to port it over, and see what the performance difference was.
I made a small adaption for a better comparison. I&amp;rsquo;m now using a grid that has 100_000_000 squares on it. This is definitely a bit of work.
The code package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; ) var grid [][]int var gridDim [2]int var a = make(map[[2]int]bool) func main() { jsonFile, err := ioutil.</description>
      <content:encoded><![CDATA[ I recently solved a coding challenge using Ruby. I&amp;rsquo;ve been curious for some time about coding using Golang, and so I decided to port it over, and see what the performance difference was.
I made a small adaption for a better comparison. I&amp;rsquo;m now using a grid that has 100_000_000 squares on it. This is definitely a bit of work.
The code package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; ) var grid [][]int var gridDim [2]int var a = make(map[[2]int]bool) func main() { jsonFile, err := ioutil.ReadFile(os.Args[1]) if err != nil { fmt.Println(err) } json.Unmarshal([]byte(jsonFile), &amp;amp;grid) gridDim[0] = len(grid) gridDim[1] = len(grid[0]) greatest := 0 for rowIndex, row := range grid { for colIndex := range row { currentKey := [2]int{rowIndex, colIndex} _, hasKey := a[currentKey] if hasKey { continue } a[currentKey] = true total := findCluster(currentKey, true) if total &amp;gt; greatest { greatest = total } } } fmt.Println(greatest) } func getValFromGrid(coords [2]int) int { return grid[coords[0]][coords[1]] } func findCluster(coords [2]int, first bool) int { currentValue := getValFromGrid(coords) adjascentSquares := [4][2]int{ {coords[0] - 1, coords[1]}, {coords[0], coords[1] - 1}, {coords[0] &#43; 1, coords[1]}, {coords[0], coords[1] &#43; 1}, } total := 1 for _, v := range adjascentSquares { _, hasKey := a[v] if hasKey { continue } if withinGrid(v) &amp;amp;&amp;amp; hasSameValue(currentValue, v) { a[v] = true total = total &#43; findCluster(v, false) } } return total } func hasSameValue(val int, coords [2]int) bool { return getValFromGrid(coords) == val } func withinGrid(coords [2]int) bool { return coords[0] &amp;gt;= 0 &amp;amp;&amp;amp; coords[0] &amp;lt; gridDim[0] &amp;amp;&amp;amp; coords[1] &amp;gt;= 0 &amp;amp;&amp;amp; coords[1] &amp;lt; gridDim[1] } The Benchamrk ruby run.rb gen_grid_10000.json 933.50s user 26.53s system 95% cpu 16:45.07 total ./grid gen_grid_10000.json 97.89s user 4.45s system 98% cpu 1:43.81 total  As you can see from the above. Golang did the job at a remarkable 10x the rate of the Ruby implementation. The tradeoff is just that it&amp;rsquo;s more annoying to write. I&amp;rsquo;ll probably stick to ruby for most things, but golang is clearly worth consideration when there&amp;rsquo;s a problem that requires a performance boost!
]]></content:encoded>
    </item>
    <item>
      <title>Proving the Monty Hall Problem</title>
      <link>https://www.corylogan.com/bits/bits/proving-the-monty-hall-problem/</link>
      <pubDate>Tue, 21 May 2019 04:35:16 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/proving-the-monty-hall-problem/</guid>
      <description>Doors    When I first heard of the Monty Hall problem, I read about it in Sam Harris&amp;rsquo; The Moral Landscape, and it took me a few minutes to really wrap my brain around it. Talking about it with a few people since, I struggle to convince them that this really works this way. I think part of it is that I still don&amp;rsquo;t quite believe it.</description>
      <content:encoded><![CDATA[   Doors    When I first heard of the Monty Hall problem, I read about it in Sam Harris&amp;rsquo; The Moral Landscape, and it took me a few minutes to really wrap my brain around it. Talking about it with a few people since, I struggle to convince them that this really works this way. I think part of it is that I still don&amp;rsquo;t quite believe it. Which is why I&amp;rsquo;m going to write a program that can run the problem over and over to show wether or not the Monty Hall problem actually has a solution.
The Monty Hall Problem Itself Imagine you are a gameshow contestant standing in front of three doors. You know that behind one door is a pile of money and the other two doors, there is nothing. You then pick one door, let&amp;rsquo;s say door A. After selecting a door, the game show host points to one of the other two doors, door B, and tells you that this door does not contain the prize. At this point you are offered the opportunity to switch doors from door A to door C, or stick with your original choice of door A.
Should you switch? What are the odds if you do or don&amp;rsquo;t switch?
If you keep reading you&#39;ll read the answer and the solution, if you want a minute to think about it for yourself, pause here.  To most people, it appears obvious that you have 50&amp;frasl;50 odds in this case. But in fact, you should always switch. If you don&amp;rsquo;t switch, your odds of winning are 1&amp;frasl;3, and if you do, your odds are 2&amp;frasl;3.
You should always switch.
Explanation of why this works When you first guess at a door your odds are exactly 1&amp;frasl;3. So your odds of picking wrong are 2&amp;frasl;3. Once one door is eliminated, it&amp;rsquo;s still true that your probably picked incorrectly, thus, you should switch doors.
Code to Prove It Here we run the experiment a million times to show what the odds really are.
def gameshow(switch) doors = [1, 0, 0].shuffle choice = rand(3) removed_door = [0,1,2] .reject { |d| d == choice } .filter { |d| doors[d] == 0 } .sample switched_choice = [0, 1, 2] .reject { |d| removed_door == d || choice == d } .first choice = switched_choice if switch doors[choice] end def run_experiment switch_results = 1_000_000.times.map do gameshow(true) end.sum / 10_000.0 stay_results = 1_000_000.times.map do gameshow(false) end.sum / 10_000.0 puts &amp;#34;By switching you won #{switch_results}&amp;#34; puts &amp;#34;By staying you won #{stay_results}&amp;#34; end run_experiment This returns as anticipated:
By switching you won 66.6246 By staying you won 33.3209  A more in depth explanation   ]]></content:encoded>
    </item>
    <item>
      <title>Find Adjascent Squares for a Coding Challenge</title>
      <link>https://www.corylogan.com/bits/bits/find-adjascent-squares-for-a-coding-challenge/</link>
      <pubDate>Mon, 20 May 2019 05:11:59 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/find-adjascent-squares-for-a-coding-challenge/</guid>
      <description>Random grid of numbers.    I spotted a challenge that was something like this online, and I adapted it. There was something that I wanted to understand a little bit better. The interesting thing here is about the data structures used, to increase efficiency.
Find Contiguous Squares Imagine you have a grid of n width and height, and it&amp;rsquo;s populated with random numbers. It could be represented something like this:</description>
      <content:encoded><![CDATA[   Random grid of numbers.    I spotted a challenge that was something like this online, and I adapted it. There was something that I wanted to understand a little bit better. The interesting thing here is about the data structures used, to increase efficiency.
Find Contiguous Squares Imagine you have a grid of n width and height, and it&amp;rsquo;s populated with random numbers. It could be represented something like this:
[ [1, 1, 2, 2, 1, 1, 1, 2, 1, 2], [1, 0, 0, 2, 1, 1, 2, 2, 0, 2], [0, 1, 0, 1, 2, 1, 0, 1, 2, 2], [2, 1, 2, 1, 0, 0, 0, 2, 1, 0], [0, 2, 1, 2, 1, 1, 2, 1, 2, 0], [1, 1, 1, 2, 1, 1, 0, 0, 2, 1], [1, 2, 1, 2, 2, 2, 2, 1, 2, 1], [2, 1, 1, 2, 2, 1, 2, 0, 1, 1], [0, 1, 1, 2, 2, 0, 1, 0, 2, 2], [2, 2, 2, 1, 0, 1, 1, 0, 2, 2] ] In fact, that&amp;rsquo;s the exact grid that the image is of above.
Now, you need to write a program that accepts the grid and returns the greatest number of contiguous squares that have the same value. In this case, the function should return 11. If you look for a moment you&amp;rsquo;ll find the cluster of 11 orange squares, it&amp;rsquo;s pretty trivial for the human brain to do.
But, let&amp;rsquo;s expand this to say, a million squares. The following program can do this on my computer in about 5 seconds.
class GridChecker def initialize(grid) @assessed = {} @grid = grid end def run greatest = 0 @grid.each_with_index do |row, ri| row.each_with_index do |_col, ni| coords = [ri, ni] next if @assessed.key?(coords) cluster_size = check_square(coords) greatest = cluster_size if cluster_size &amp;gt; greatest end end greatest end def check_square(coords) @assessed[coords] = nil find_cluster(coords) end def find_cluster(coords) total = 1 adjascent_squares(coords).map do |adjascent_coords| next if @assessed.key?(adjascent_coords) @assessed[adjascent_coords] = nil total &#43;= find_cluster(adjascent_coords) end total end def adjascent_squares(coords) neighbor_coords(*coords).filter do |x| within_grid(*x) &amp;amp;&amp;amp; @grid[x[0]][x[1]] == @grid[coords[0]][coords[1]] end end def within_grid(row, col) row &amp;gt;= 0 &amp;amp;&amp;amp; row &amp;lt; grid_height &amp;amp;&amp;amp; col &amp;gt;= 0 &amp;amp;&amp;amp; col &amp;lt; grid_width end def grid_width @grid_width ||= @grid[0].length end def grid_height @grid_height ||= @grid.length end def neighbor_coords(row, col) [ [row - 1, col], [row, col - 1], [row &#43; 1, col], [row, col &#43; 1] ] end end The Twist Here&amp;rsquo;s the thing that surprised me a little bit, and took some learning. I&amp;rsquo;ve always thought about arrays as being simpler data structures than hashes (or objects or libraries depending on your language), and so in my mind I had just taken for granted that using them was more efficient for many things. But this simple task very quickly demonstrats that this is not the case.
The key here is that in the @assessed instance variable, I&amp;rsquo;ve used a hash rather than an Array. It&amp;rsquo;s easy to use either in this case. It feels weird to be assigning arbitrary nil values that aren&amp;rsquo;t even used for anything. But the thing is that the look up time on this ever growing variable is so much faster when using a hash, and it doesn&amp;rsquo;t slow down the way it does with an array. Using an array for the same thing means that you have to iterate over it repeatedly, leading to a huge slow down as you add more data.
Something Else to Play with Here&amp;rsquo;s a quick script to generate a grid of n dimensions to play with. It&amp;rsquo;s a quick way to get started with your own implementation, or to play with performance.
require &amp;#39;json&amp;#39; def gen_grid(n) n.times.map do n.times.map do rand(3) end end end File.write(&amp;#39;grid.json&amp;#39;, gen_grid(1000).to_json)]]></content:encoded>
    </item>
    <item>
      <title>Big O Notation Put Simply</title>
      <link>https://www.corylogan.com/bits/bits/big-o-notation-put-simply/</link>
      <pubDate>Sat, 18 May 2019 21:02:54 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/big-o-notation-put-simply/</guid>
      <description>&amp;ldquo;Big O&amp;rdquo; notation is called this because it&amp;rsquo;s written something like O(n), and serves as a measure of efficiency of a particular algorithm. It&amp;rsquo;s a way of explaining how much a particular piece of code will suffer when put under load.
The the meaning of the &amp;ldquo;O&amp;rdquo; appears to be purely historical. So don&amp;rsquo;t get caught up on that.
I&amp;rsquo;ll do a few examples in ruby to show how this works.</description>
      <content:encoded><![CDATA[ &amp;ldquo;Big O&amp;rdquo; notation is called this because it&amp;rsquo;s written something like O(n), and serves as a measure of efficiency of a particular algorithm. It&amp;rsquo;s a way of explaining how much a particular piece of code will suffer when put under load.
The the meaning of the &amp;ldquo;O&amp;rdquo; appears to be purely historical. So don&amp;rsquo;t get caught up on that.
I&amp;rsquo;ll do a few examples in ruby to show how this works.
O(n) or O of n Here we have a method with the complexity O(n), which means that it will take longer based on how much information you put in it, on a linear scale.
# Create a large something we can iterate over many = 1..1_000 def o_of_n(arg) arg.each { |i| puts i} end o_of_n(many) O(n^2) or &amp;ldquo;O of n squared&amp;rdquo; This one will square the amount of time it takes based on the same data. Assume the same setup as above. In other words, it takes 1000 times longer to run than the last example.
def o_of_n_squared(arg) arg.each do |i| arg.each do |n| puts(i,n) end end end o_of_n_squared(many) O(a&#43;b) Becuase this method does two things in sequence, we add the two together.
a = 1..1_000 b = 1..10_000 def o_of_a_plus_b(a, b) a.each { |i| puts i} b.each { |i| puts i} end O(1) Does not change complexity based on the input You&amp;rsquo;ll notice our method in this case doesn&amp;rsquo;t actually use the input at all. Increasing the amount of data input into the method changes nothing.
many = 1..1_000_000 def o_of_one(arg) 2 &#43; 2 end o_of_one(many)   Visualizing various Big O efficiencies    ]]></content:encoded>
    </item>
    <item>
      <title>Use Terraform to Set Up Github Pages With Route 53</title>
      <link>https://www.corylogan.com/bits/bits/use-terraform-to-set-up-github-pages-with-route-53/</link>
      <pubDate>Fri, 17 May 2019 19:31:13 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/use-terraform-to-set-up-github-pages-with-route-53/</guid>
      <description>This will result in a certificate error if you don&#39;t take further steps.  It&amp;rsquo;s nice to be able to spin up everything you need for github pages all in one go. If you&amp;rsquo;re using amazon for AWS, here&amp;rsquo;s a basic terraform configuration that should do everything you want in terms of DNS. This assumes you want to point everything at the apex domain rather than the www.
After doing this you&amp;rsquo;ll still need to specify the CNAME file on your target project, and set the name servers on the domain.</description>
      <category domain="https://www.corylogan.com/categories/infrastructure">Infrastructure</category>
      <content:encoded><![CDATA[ This will result in a certificate error if you don&#39;t take further steps.  It&amp;rsquo;s nice to be able to spin up everything you need for github pages all in one go. If you&amp;rsquo;re using amazon for AWS, here&amp;rsquo;s a basic terraform configuration that should do everything you want in terms of DNS. This assumes you want to point everything at the apex domain rather than the www.
After doing this you&amp;rsquo;ll still need to specify the CNAME file on your target project, and set the name servers on the domain. This requires that you&amp;rsquo;re using terraform to manage all DNS for this domain.
This will direct any traffic from any of https://example.com, http://example.com, and http://www.example.com to the same github pages location. The only problem with this is when it comes to directing https://www.example.com to your github pages site. You&amp;rsquo;ll need to do a server side redirect if you want that part to work.
resource &amp;#34;aws_route53_zone&amp;#34; &amp;#34;primary&amp;#34; { name = &amp;#34;example.com&amp;#34; } resource &amp;#34;aws_route53_record&amp;#34; &amp;#34;main&amp;#34; { zone_id = &amp;#34;${aws_route53_zone.primary.zone_id}&amp;#34; name = &amp;#34;example.com&amp;#34; type = &amp;#34;A&amp;#34; ttl = &amp;#34;300&amp;#34; records = [&amp;#34;185.199.108.153&amp;#34;, &amp;#34;185.199.109.153&amp;#34;, &amp;#34;185.199.110.153&amp;#34;, &amp;#34;185.199.111.153&amp;#34;] } resource &amp;#34;aws_route53_record&amp;#34; &amp;#34;www&amp;#34; { zone_id = &amp;#34;${aws_route53_zone.primary.zone_id}&amp;#34; name = &amp;#34;www.example.com&amp;#34; type = &amp;#34;CNAME&amp;#34; ttl = &amp;#34;300&amp;#34; records = [&amp;#34;yourusername.github.io&amp;#34;] } output &amp;#34;name_servers&amp;#34; { value = &amp;#34;${aws_route53_zone.primary.name_servers}&amp;#34; } ]]></content:encoded>
    </item>
    <item>
      <title>Variable Naming Cases</title>
      <link>https://www.corylogan.com/bits/bits/variable-naming-cases/</link>
      <pubDate>Fri, 03 Aug 2018 18:52:37 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/variable-naming-cases/</guid>
      <description>There are a number of ways to make variables readable, and also to distinguish what variable types you might be working with. These things change from language to language, but it&amp;rsquo;s nice to have a common set of vocabulary to refer to them. I find that I&amp;rsquo;m sometimes forgetful of how to actually refer to any given case, so here&amp;rsquo;s a quick reference.
   Case Example     Snake Cases snake_case   Camel Case camelCase   Pascal Case Pascal Case   Kebab Case kebab-case    I&amp;rsquo;ve found that I often want to be able to switch from one to another, and that there&amp;rsquo;s always a solution already in existence, the most helpful thing is knowing what to call it for the sake of googling.</description>
      <content:encoded><![CDATA[There are a number of ways to make variables readable, and also to distinguish what variable types you might be working with. These things change from language to language, but it&amp;rsquo;s nice to have a common set of vocabulary to refer to them. I find that I&amp;rsquo;m sometimes forgetful of how to actually refer to any given case, so here&amp;rsquo;s a quick reference.
   Case Example     Snake Cases snake_case   Camel Case camelCase   Pascal Case Pascal Case   Kebab Case kebab-case    I&amp;rsquo;ve found that I often want to be able to switch from one to another, and that there&amp;rsquo;s always a solution already in existence, the most helpful thing is knowing what to call it for the sake of googling.
It seems like I generally reach for these when doing some type of meta-programming.
]]></content:encoded>
    </item>
    <item>
      <title>Github Pages With Apex Domain</title>
      <link>https://www.corylogan.com/bits/bits/github-pages-with-apex-domain/</link>
      <pubDate>Thu, 12 Jul 2018 18:56:11 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/github-pages-with-apex-domain/</guid>
      <description>Saving time and money with GitHub Pages I know that GitHub Pages are nothing new, but I only recently realized how versatile they are. You can host any static content you want there for free, and I’ve recently started using it for my blogs. Major benefits of using GitHub Pages as I see it:
 Free hosting for simple pages Deployment is as easy as a git push SSL certs are a one time checkbox It handles redirecting to the www subdomain, or to the apex domain without no real configuration  My default configuration You just have to set up the DNS.</description>
      <content:encoded><![CDATA[ Saving time and money with GitHub Pages I know that GitHub Pages are nothing new, but I only recently realized how versatile they are. You can host any static content you want there for free, and I’ve recently started using it for my blogs. Major benefits of using GitHub Pages as I see it:
 Free hosting for simple pages Deployment is as easy as a git push SSL certs are a one time checkbox It handles redirecting to the www subdomain, or to the apex domain without no real configuration  My default configuration You just have to set up the DNS.
 Create a CNAME record from your www subdomain to your-username.github.io Create an A record to each of the following from your apex domains   185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153   Once your DNS has propagated, visit the settings on your repo, add either your www or apex domain as your custom domain:   GitHub Pages Control Panel     Once GitHub has gotten a cert from LetsEncrypt, the option to enforce HTTPS will be available to you. Now all you have to do is set up an index.html file on the gh-pages branch (if you selected that option), or on the master in the docs folder (if you chose this route). This will probably depend on how you choose to build your site, what’s convenient.  I use a build server that builds all of my blogs as static sites, and then adds them to my gh-pages branch and pushes to git after I make any change to any of them, that’s beyond the scope of this article, but it’s something to think about.
GitHub pages seem perfect for small businesses, personal blogs, or software docs. More complete documentation can be found on GitHub. These are just the settings I generally go with, as I think they’re great defaults.
The problem with this setup You&amp;rsquo;ll get a cert error when visiting the https:// version of the site. If you want to avoid this, you&amp;rsquo;ll need to point the version of the domain, be it the www or the apex, to a server that can perform a 301 redirect.
]]></content:encoded>
    </item>
    <item>
      <title>Serving Localhost to the Web with Reverse Ssh Tunnels</title>
      <link>https://www.corylogan.com/bits/bits/serving-localhost-to-the-web-with-reverse-ssh-tunnels/</link>
      <pubDate>Mon, 10 Jul 2017 13:12:03 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/serving-localhost-to-the-web-with-reverse-ssh-tunnels/</guid>
      <description>Note: If you don&amp;rsquo;t have a server already, check my last tip.
This topic is always a little tricky, so, here&amp;rsquo;s the basic thing to know, as this is the most frequent use case.
Suppose you have a development rails server running on your local computer. You can access this server via curl http://localhost:3000. Which is to say, it&amp;rsquo;s running on your localhost, on port 3000. You want your client to see it, to give you feedback, but they&amp;rsquo;re nowhere near you, and you just want a quick way to show it to them.</description>
      <category domain="https://www.corylogan.com/categories/technology">Technology</category>
      <content:encoded><![CDATA[ Note: If you don&amp;rsquo;t have a server already, check my last tip.
This topic is always a little tricky, so, here&amp;rsquo;s the basic thing to know, as this is the most frequent use case.
Suppose you have a development rails server running on your local computer. You can access this server via curl http://localhost:3000. Which is to say, it&amp;rsquo;s running on your localhost, on port 3000. You want your client to see it, to give you feedback, but they&amp;rsquo;re nowhere near you, and you just want a quick way to show it to them.
Fortunately for you, you know about ssh. You know that it will take you just a few seconds to set up a reverse tunnel through an intermediate server. Cake! Huh?
Things you&amp;rsquo;ll need, and their values in my example:
 Some kind of server on the web running sshd (yourserver.com) A local webserver accessible (0.0.0.0:3000)  ssh -NR 3333:localhost:3000 user@yourserver.com Now that the tunnel is running, you should be able to access your web server at http://yourserver.com:3333. You can of course change either of the ports. There are a few caveats, but this is it in the basic form.
Troubleshooting If that&amp;rsquo;s not working for you, chances are you need the GatewayPorts yes option added to the file /etc/ssh/sshd_config on the server. Go in there and add that line, then restart the ssh service. With ubuntu that&amp;rsquo;s just sudo service ssh restart.
Tips  You can run this in the background if you want by adding the -f flag. I prefer to run it in the foreground when I&amp;rsquo;m just using it for a moment, or troubleshooting as it&amp;rsquo;s easier to kill. If you run it in the background, and you just try to run it again on the same port, they will collide, and you will fail. Lower port numbers (lower than 1024) can&amp;rsquo;t be used unless you&amp;rsquo;re a super user on the system. Generally, it&amp;rsquo;s just easier to use a higher port number on the remote server. The -v flag will give you the full ssh output with authentication. This is another common source of problems. If you have a few dollars, and not much interest in the topic, check out ngrok, it&amp;rsquo;s a great tool that really takes most of the trouble out of it. It also means you don&amp;rsquo;t need to bring your own server! If you don&amp;rsquo;t wish to run your own server, this is the way to go.  ]]></content:encoded>
    </item>
    <item>
      <title>Saving Time With Tmux</title>
      <link>https://www.corylogan.com/bits/bytes/saving-time-with-tmux/</link>
      <pubDate>Mon, 10 Jul 2017 11:45:28 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/saving-time-with-tmux/</guid>
      <description>What is a terminal multiplexer, and why do I care? When you split up a terminal screen into sub-terminals, that&amp;rsquo;s called terminal multiplexing. This is nothing new, GNU Screen has been around since 1987. Tmux is just screen&amp;rsquo;s younger, nubile cousin. I&amp;rsquo;m about to explain how this simple technology can:
 Keep you organized. Lower the bar to get to work. Save you time. Enable teamwork.  Here&amp;rsquo;s a quick demonstration:</description>
      <content:encoded><![CDATA[ What is a terminal multiplexer, and why do I care? When you split up a terminal screen into sub-terminals, that&amp;rsquo;s called terminal multiplexing. This is nothing new, GNU Screen has been around since 1987. Tmux is just screen&amp;rsquo;s younger, nubile cousin. I&amp;rsquo;m about to explain how this simple technology can:
 Keep you organized. Lower the bar to get to work. Save you time. Enable teamwork.  Here&amp;rsquo;s a quick demonstration: 
Multiple panes for multiple things If you watch the demo above, you can see that you can make multiple panes, and multiple windows. You can organize them however you like.
The benefit of this is that you can have a server running in one pane, and an editor running on another. Or your test suite. Or whatever else you need to keep an eye on.
You might think, well, I can already do that in my terminal app. And maybe you can! But, can you do it on remote servers over ssh? And can you keep those panes running even if you quit your terminal app? Didn&amp;rsquo;t think so.
Keep your workspace tidy What if, every time you went to start working on your app, your text editor opened, your test suite ran, git pulled the latest changes, and a development server launched? If that gets you at all excited, you should check out tmuxinator. There are other options out there that do the same thing. But, with a simple configuration file, you can have all that and more!
Work on remote servers Sometimes when working on a remote server, it&amp;rsquo;s useful to keep a long running task going, or at least be able to look at the same workspace you were looking at previously. By keeping your work in a tmux session, you can simply rejoin the session you were previously using. Everything is now exactly as you left it!
I realize it&amp;rsquo;s not the best use, but there have been a couple of times I&amp;rsquo;ve used tmux to keep a long running task going in the background on a server. This way, when I close my laptop and walk away, everything keeps running. Imagine a long rake task, sure I could have put it in a background job, but it was a one off task, and writing the job would have been unnecessary work.
Collaborate You can have more than one person in a tmux session at once. This has to be one of the greatest things of all about tmux. It&amp;rsquo;s like screen sharing, but so much faster, as it&amp;rsquo;s just over an ssh session. There is nothing worse than trying to collaborate over a slow VNC screen share, it&amp;rsquo;s like typing with boxing gloves. There are a few hoops to jump through, another user, ssh access, and permissions&amp;hellip; But there&amp;rsquo;s another option.
Tmate is a fantastically handy little utility that does all of the hoop jumping for you. After installing tmate, just run it, and give your friend access by copying your secure ssh command. Even from the other side of the world, you can have lag-free collaboration!
Next steps Go give tmux a shot!
You&amp;rsquo;ll need to learn some of the basic commands for getting around, and probably do a little customization. Good luck!
]]></content:encoded>
    </item>
    <item>
      <title>Exporting A Zone File From Mediatemple</title>
      <link>https://www.corylogan.com/bits/bits/exporting_a_zone_file_from_mediatemple/</link>
      <pubDate>Mon, 09 Jan 2017 00:45:38 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/exporting_a_zone_file_from_mediatemple/</guid>
      <description>I was in the process of moving my DNS from MediaTemple to Route53 and was having trouble making sure I&amp;rsquo;d moved all of the entries. I decided I&amp;rsquo;d just export a zone file to do a comparison in a text editor.
Surprise! You can&amp;rsquo;t.
Instead, here&amp;rsquo;s a quick bit of jQuery, which is already available in the MediaTemple control panel. Just navigate to the zone file editor, open your console, and use this:</description>
      <content:encoded><![CDATA[I was in the process of moving my DNS from MediaTemple to Route53 and was having trouble making sure I&amp;rsquo;d moved all of the entries. I decided I&amp;rsquo;d just export a zone file to do a comparison in a text editor.
Surprise! You can&amp;rsquo;t.
Instead, here&amp;rsquo;s a quick bit of jQuery, which is already available in the MediaTemple control panel. Just navigate to the zone file editor, open your console, and use this:
$.each($(&amp;#34;.dns_record&amp;#34;), function(i, el) { name = $(el) .find(&amp;#34;.u-nowrap input&amp;#34;) .val(); type = $(el) .find(&amp;#34;select.dropdown-select&amp;#34;) .val(); data = $(el) .find(&amp;#34;td input.textInput--full[name^=&amp;#39;data&amp;#39;]&amp;#34;) .val(); console.log(name &#43; &amp;#34; &amp;#34; &#43; type &#43; &amp;#34; &amp;#34; &#43; data); });  From here, it&amp;rsquo;s pretty easy to clean up and convert. Good luck!
]]></content:encoded>
    </item>
    <item>
      <title>Reducing The Size Of Alpine Docker Images</title>
      <link>https://www.corylogan.com/bits/bits/reducing_the_size_of_alpine_docker_images/</link>
      <pubDate>Tue, 27 Dec 2016 06:38:02 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/reducing_the_size_of_alpine_docker_images/</guid>
      <description>Why the heck is my alpine docker image so huge? That&amp;rsquo;s a tough question to answer, especially when you have no idea what&amp;rsquo;s taking up all of the space.
This is a dirty little one-liner that yields a sorted list of all of the packages on your alpine image by size. It does this by
 Getting the complete list from apk info Iterating over the results to ask apk for its size Removing the blank lines Combining the size lines and the name lines Sorting by size  apk info | while read a; do apk info -s $a; done | awk NF | sed &amp;#39;Ns/\n/ /&amp;#39; | sort -k4 -n It may be ugly, but now I can make an informed decision about wether or not there are binaries that can be axed.</description>
      <content:encoded><![CDATA[ Why the heck is my alpine docker image so huge? That&amp;rsquo;s a tough question to answer, especially when you have no idea what&amp;rsquo;s taking up all of the space.
This is a dirty little one-liner that yields a sorted list of all of the packages on your alpine image by size. It does this by
 Getting the complete list from apk info Iterating over the results to ask apk for its size Removing the blank lines Combining the size lines and the name lines Sorting by size  apk info | while read a; do apk info -s $a; done | awk NF | sed &amp;#39;Ns/\n/ /&amp;#39; | sort -k4 -n It may be ugly, but now I can make an informed decision about wether or not there are binaries that can be axed.
]]></content:encoded>
    </item>
    <item>
      <title>What Process Is Hogging My Port On Mac Os</title>
      <link>https://www.corylogan.com/bits/bits/what_process_is_hogging_my_port_on_mac_os/</link>
      <pubDate>Thu, 15 Dec 2016 19:51:29 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bits/what_process_is_hogging_my_port_on_mac_os/</guid>
      <description>Address already in use Damn. Did I leave a server running somewhere? Sometimes you&amp;rsquo;re not sure where you left a server running, or where something is running you never knew about. I&amp;rsquo;m finally writing this down, as I always have to look it up. I found this solution in a StackOverflow post.
Here&amp;rsquo;s how to get all of the processes by what port they&amp;rsquo;re using.
sudo lsof -iTCP -sTCP:LISTEN -n -P As A Shell Function Looking at it, I realized I would never remember it, given how infrequently I need it.</description>
      <category domain="https://www.corylogan.com/categories/technology">Technology</category>
      <content:encoded><![CDATA[ Address already in use Damn. Did I leave a server running somewhere? Sometimes you&amp;rsquo;re not sure where you left a server running, or where something is running you never knew about. I&amp;rsquo;m finally writing this down, as I always have to look it up. I found this solution in a StackOverflow post.
Here&amp;rsquo;s how to get all of the processes by what port they&amp;rsquo;re using.
sudo lsof -iTCP -sTCP:LISTEN -n -P As A Shell Function Looking at it, I realized I would never remember it, given how infrequently I need it. So, I wrote a function. You should be able to pop this into your .bashrc or .zshrc, or whatever you&amp;rsquo;re using.
function whats_using { if [ -z $1 ]; then sudo lsof -iTCP -sTCP:LISTEN -n -P else sudo lsof -iTCP -sTCP:LISTEN -n -P | grep $1 fi } Now you can search for what&amp;rsquo;s using a port like so, or don&amp;rsquo;t specify a port number to return all results.
➜ whats_using 8181 com.docke 4082 cory 20u IPv4 0xa05b24c922aef1a1 0t0 TCP *:8181 (LISTEN) com.docke 4082 cory 21u IPv6 0xa05b24c91a710329 0t0 TCP [::1]:8181 (LISTEN)]]></content:encoded>
    </item>
    <item>
      <title>Why Choose Vim</title>
      <link>https://www.corylogan.com/bits/bytes/why-choose-vim/</link>
      <pubDate>Wed, 14 Dec 2016 02:30:08 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/why-choose-vim/</guid>
      <description>TLDR Choosing a text editor is a very personal decision. You grow with your editor, as your editor grows with you. As I use my text editor more and more over the years, I&amp;rsquo;m constantly constantly learning new techniques for working more efficiently. Some of them stick, others are forgotten. I find that sequences and shortcuts that I most use stay. But just as importantly VIM accommodates my changing needs through configuration, plugin, or otherwise.</description>
      <content:encoded><![CDATA[ TLDR Choosing a text editor is a very personal decision. You grow with your editor, as your editor grows with you. As I use my text editor more and more over the years, I&amp;rsquo;m constantly constantly learning new techniques for working more efficiently. Some of them stick, others are forgotten. I find that sequences and shortcuts that I most use stay. But just as importantly VIM accommodates my changing needs through configuration, plugin, or otherwise.
Most of all, you need a good editor, that you are familiar with.
Why Vim Works For Me Different jobs require different tools.
Vim also has it&amp;rsquo;s own set of advantages. It&amp;rsquo;s very fast at large search and replace operations. It&amp;rsquo;s infinitely extensible, with plugins that integrate with git, automatically format tables, check syntax. It can be operated entirely over SSH. It&amp;rsquo;s easily customized. It&amp;rsquo;s ubiquitous. It&amp;rsquo;s free. It has a great community of people.
What does it look like? It actually looks pretty modern!
A Few Caveats  Steep learning curve. Customization is almost requisite Not everyone knows how to use VIM, this can be and impediment to working with someone else at your computer.  I actually keep a couple of GUI editors around as I find that have uses for them. There are some tasks that mice are just really good at. TextWrangler works well with really large files. Sometimes I might just it to look at a gigantic CSV alongside the code that&amp;rsquo;s being used to manipulate it.
Better, Faster, Stronger Vim is brilliant in how extensible and malleable it is. You can change it by simply installing a new plugin. The setup can be entirely scripted.
As an editor, Vi has really led the way on a great many conventions. Vim came after Vi and offers a superset of features. Having different modes of editing, and keyboard navigation, are some of the most fundamental parts. It wasn&amp;rsquo;t just that it was early to introduce these features, but that they&amp;rsquo;ve been perfected over many years.
Vim has always been light and nimble. It&amp;rsquo;s fast to boot (unless you load it down with tons of plugins)
Portability Vim comes standard on all modern builds of Linux and Mac OS. You can jump right into it. It&amp;rsquo;s really helpful to be able to navigate a bare bones installation of Vim, even if you don&amp;rsquo;t do it as well as with a customized version.
Another huge piece of portability, is remote access. Vim works marvelously over an ssh connection. I can do remote work on a server far away, as though it were local. This is really great for travel.
If you want to give it a go, you can try out my configuration found on github.
I Frequently Use Other Editors Vim is a tool. It&amp;rsquo;s very useful to know. But sometimes, I actually prefer to work in a different application. My other favorite editor at the moment is Atom, and I&amp;rsquo;m using it right now to with this entry. It has great markdown support and integrates with system spell checking. At the end of the day, Vim has a load of features and advantages that can help you work faster. But, you must always use what works for you!
]]></content:encoded>
    </item>
    <item>
      <title>A Single Singleton in Ruby</title>
      <link>https://www.corylogan.com/bits/bytes/a-single-singleton-in-ruby/</link>
      <pubDate>Wed, 14 Dec 2016 02:22:26 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/a-single-singleton-in-ruby/</guid>
      <description>The singleton design pattern I&amp;rsquo;m relatively new the the concept of the singleton, even though I&amp;rsquo;ve been programming for a number of years. I&amp;rsquo;ve run into several instances in which I new that this was exactly what I needed, but did not have a name for it. Here, I&amp;rsquo;m going to try to explain it to myself a year ago. There are a few questions I&amp;rsquo;ll try to address.</description>
      <content:encoded><![CDATA[ The singleton design pattern I&amp;rsquo;m relatively new the the concept of the singleton, even though I&amp;rsquo;ve been programming for a number of years. I&amp;rsquo;ve run into several instances in which I new that this was exactly what I needed, but did not have a name for it. Here, I&amp;rsquo;m going to try to explain it to myself a year ago. There are a few questions I&amp;rsquo;ll try to address.
 Why do I care? What does it do? How should I implement it?  Why do I care? A lot has been written on design patterns, and by people with a lot more experience than myself. I&amp;rsquo;d recommend picking up a book on the topic and learning a bit more if it&amp;rsquo;s a new concept to you. Each one of these patterns is a tool that you can use to solve problems that have been solved over and over again. They can hasten, and solidify your development, as well as give you a way to succinctly communicate big ideas.
This particular pattern generally comes into play when you need some kind of global object to not only provide a set of methods, but also manage some kind of global state.
What does it do? I&amp;rsquo;ll give you a real world example to help make the point. In working on an application that was in charge of sifting through large piles of data, and alerting a person for errors several times a day, I needed a way to keep track of the errors in memory. It also needed to be available to many different classes in the application.
The singleton fits this almost perfectly.
I&amp;rsquo;ll admit, there are many cases when it&amp;rsquo;s a poor choice for the pattern to use. Any time you only need state for a little while, or if you need more than a handful of methods on an object.
In essence, the singleton is for simple objects that are action based, and that you only want one of in the instance of your application.
How should I implement it? There are different ways to implement the singleton pattern. Let&amp;rsquo;s first go over an example of the pattern implemented by hand, so that you can see how it works, before we try to hide some of the details. We&amp;rsquo;ll stick with the error logger example.
class ErrorLogger # This prevents the class from being instantiated. With a singleton, we don&amp;#39;t # want more than one instance. That&amp;#39;s pretty much the definition. private_class_method :new # This class variable will be in charge of storing the global state of our # singleton in memory. All of the information will end up here. We&amp;#39;ll access # it through another method of our choosing. @@log = [] # Everything inside of this will be declared as a class method. class &amp;lt;&amp;lt; self def log_an_error(error) @@log &amp;lt;&amp;lt; error end def print_log @@log.inspect end end end ErrorLogger.log_an_error(&amp;#39;Server is on fire!&amp;#39;) ErrorLogger.print_log # =&amp;gt; [&amp;#34;Server is on fire&amp;#34;] There are other implementations of the singleton, but I prefer to simply have the class expose any methods directly on itself. Some other singletons have the class create a single instance of itself, and all methods are instance methods, and in that case you can use instance variables.
But, this can be simplified further with the help of ruby&amp;rsquo;s built in singleton module. The one gotcha here, is that calling it behaves a little differently. These are now instance methods and must be called on the instance.
require &amp;#39;singleton&amp;#39; class ErrorLogger include Singleton def initialize @log = [] end def log_an_error(error) @log &amp;lt;&amp;lt; error end def print_log @log.inspect end end error_logger = ErrorLogger.instance error_logger.log_an_error(&amp;#39;Killing me softly...&amp;#39;) error_logger.print_log # =&amp;gt; [&amp;#34;Killing me softly...&amp;#34;] In my opinion, it doesn&amp;rsquo;t look much better than the first example. But, it does avoid the use of class variables, which is nice.
I think though, the one that I&amp;rsquo;ll probably reach for next time, is using module methods on a module. I know that this overlooks a few things, like the fact that modules can be mixed into classes, and you don&amp;rsquo;t really want that with a singleton. But, I&amp;rsquo;d say, in all practical terms, just don&amp;rsquo;t do that.
module ErrorLogger class &amp;lt;&amp;lt; self def log @log ||= [] end def log_an_error(error) log &amp;lt;&amp;lt; error end def print_log log.inspect end end end ErrorLogger.log_an_error(&amp;#39;Whoops!&amp;#39;) ErrorLogger.print_log # =&amp;gt; [&amp;#34;Whoops!&amp;#34;] There are other great articles that dive further into the topic. I&amp;rsquo;d really recommend Practicing Ruby&amp;rsquo;s take on the topic.
]]></content:encoded>
    </item>
    <item>
      <title>The Mysteries of the Ruby Heredoc</title>
      <link>https://www.corylogan.com/bits/bytes/the_mysteries_of_the_ruby_heredoc/</link>
      <pubDate>Fri, 18 Nov 2016 17:28:41 UT</pubDate>
      <dc:creator>Cory Logan</dc:creator>
      <guid>https://www.corylogan.com/bits/bytes/the_mysteries_of_the_ruby_heredoc/</guid>
      <description>As of writing this, I&amp;rsquo;m running Ruby version 2.3.0. Not all of this, particularly the stripped heredoc, is available in plain ruby before 2.3.0.
Heredoc Basics So, you need a string that&amp;rsquo;s longer than a line, and you&amp;rsquo;re sick of quotes and backslashes? And you might like to retain formatting? You want string interpolation too? Enter, heredoc.
Here&amp;rsquo;s your basic, run of the mill, heredoc. You&amp;rsquo;ll notice we use the &amp;lt;&amp;lt;- operator, and our safe-word, which we will use to end the heredoc.</description>
      <content:encoded><![CDATA[ As of writing this, I&amp;rsquo;m running Ruby version 2.3.0. Not all of this, particularly the stripped heredoc, is available in plain ruby before 2.3.0.
Heredoc Basics So, you need a string that&amp;rsquo;s longer than a line, and you&amp;rsquo;re sick of quotes and backslashes? And you might like to retain formatting? You want string interpolation too? Enter, heredoc.
Here&amp;rsquo;s your basic, run of the mill, heredoc. You&amp;rsquo;ll notice we use the &amp;lt;&amp;lt;- operator, and our safe-word, which we will use to end the heredoc.
def print_a_haiku haiku = &amp;lt;&amp;lt;-TEXT ruby is pretty the formatting perfected lovely indented TEXT puts haiku end print_a_haiku That would simply return the text as expected:
ruby is pretty the formatting perfected lovely indented This works, but it&amp;rsquo;s clearly ugly. When you see it in a piece of code you&amp;rsquo;re trying to navigate, it&amp;rsquo;s more than a little disorienting. You could actually indent the text above, but, if you do that the string returned will also have leading spaces. In some cases, leading spaces can break things in unexpected ways.
Stripped Heredocs One thing that drives me nuts, is when I&amp;rsquo;m reading some code that contains heredocs, and suddenly you&amp;rsquo;re all the way unindented. While in many cases this might be an indicator that something is wrong, there are many places I think it&amp;rsquo;s acceptable, and even preferable to have an indented heredoc.
As of Ruby 2.3, we have a new way to handle this. We declare the heredoc using the &amp;lt;&amp;lt;~ operator.
def print_a_haiku haiku = &amp;lt;&amp;lt;~TEXT ruby is pretty the formatting perfected lovely indented TEXT puts haiku end It&amp;rsquo;s a small thing, but these little niceties really help when trying to internalize a complicated file quickly.
The Rails Way Long before ruby featured a stripped heredoc, Rails saw the need and implemented their own method. Here is their implementation, which was added as an extension of String.
class String def strip_heredoc indent = scan(/^[ \t]*(?=\S)/).min.try(:size) || 0 gsub(/^[ \t]{#{indent}}/, &amp;#39;&amp;#39;) end end This counts the minimum number of spaces before all lines of your heredoc, and indents accordingly. You&amp;rsquo;d use it like so.
puts &amp;lt;&amp;lt;-MY_STRING.strip_heredoc  here is some text and indented once here MY_STRING I mention this in part, because I found it useful, and you might find it useful if you&amp;rsquo;re on an earlier version of ruby. If you&amp;rsquo;re 2.3 or later, I would prefer the Ruby implementation.
There&amp;rsquo;s another reason this is worth looking at. It demonstrates how to extend string and write your own heredoc formatter.
My Own Bastardization It feels like I should feel guilty whenever I even consider adding an extension to a core class. I don&amp;rsquo;t though. But, I will offer a caveat. Don&amp;rsquo;t go monkey patching carelessly! Be sure you&amp;rsquo;re not overwriting anything important, or you&amp;rsquo;ll be in a world of hurt.
I, for one, believe that monkey patching can be done in respectable ways.
Enough with the warnings. Here&amp;rsquo;s the use case that got me thinking about it. Recently, I&amp;rsquo;ve been having frequent need to test the output of various CSVs. There are various ways to do this&amp;hellip; I could have fixtures, but that&amp;rsquo;s a lot of fixtures to manage. I could simply let the lines run on long, but that&amp;rsquo;s very difficult to read, and even more difficult to format. It&amp;rsquo;s a monkey patch for string that allows you to write in a clearer format, that allows you to respect line length limitations.
Take a CSV for example, but, also imagine it&amp;rsquo;s much wider.
first_name,last_name,favorite_hobby,favorite_color,favorite_food,favorite_kind_of_motorcycle Cory,Logan,climbing,red,pizza,drz400 Paul,Baker,reading,blue,cheese,klr650  So, we could just stuff it in a heredoc and call it done, but that leaves the line length too long to look at on one screen. If you&amp;rsquo;re running something like rubocop, you probably have a line length limit to contend with as well.
So, here it is with a specially formatted heredoc, in which, two line breaks equal one. Allowing you to break lines, wherever, as long as you don&amp;rsquo;t need two.
csv_string = &amp;lt;&amp;lt;-CSV.csv_doc 	first_name,last_name,favorite_hobby,favorite_color, favorite_food,favorite_kind_of_motorcycle Cory,Logan,climbing,red,pizza,drz400 Paul,Baker,reading,blue,cheese,klr650 CSV It&amp;rsquo;s worth noting what&amp;rsquo;s actually happening here, as I&amp;rsquo;d never seen the syntax for calling a method on the result of a heredoc before. The &amp;lt;&amp;lt;-CSV part, is just your regular heredoc, it&amp;rsquo;s saying that the end of the string is at the next occurrence of the text CSV, which you will find at the end. Then, the method csv_doc is called on the resulting instance of String.
This formatting is all about being able to read it in the context of code or a test. In order to achieve this formatting, this is where the monkey patch comes in.
class String def csvdoc stripped = strip_heredoc.gsub(/\n(?!\n)/, &amp;#39;&amp;#39;) &amp;#34;#{stripped}\n&amp;#34; end end This also inserts an extra empty line at the end of the string, to make it a valid CSV. This could be modified to many different cases. I&amp;rsquo;ve just been running into the CSV example a lot. And if you&amp;rsquo;re really not into monkey patching, you might consider implementing it as a standalone method that you pass a string to.
Have fun!
]]></content:encoded>
    </item>
  </channel>
</rss>
